{"version":3,"sources":["../lib/docgen.js"],"names":["generateDocs","PROPS_DIR","getDirectories","srcpath","readdirSync","filter","file","statSync","join","isDirectory","srcFiles","mainFolderPath","allComponents","info","reactDocs","require","Promise","resolve","reject","mkdirsSync","map","component","thePath","indexPath","dataString","writingTo","readFileSync","componentInfo","parse","writeJsonSync","verbose","error","warn"],"mappings":";;;;;kBAsBwBA,Y;;AAtBxB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,YAAY,oBAAUA,SAA5B;;AAEA;;;;;AAKA,SAASC,cAAT,CAAyBC,OAAzB,EACA;AACI,WAAO,kBAAGC,WAAH,CAAgBD,OAAhB,EAA0BE,MAA1B,CAAkC,UAAEC,IAAF;AAAA,eACrC,kBAAGC,QAAH,CAAa,eAAKC,IAAL,CAAWL,OAAX,EAAoBG,IAApB,CAAb,EAA0CG,WAA1C,EADqC;AAAA,KAAlC,CAAP;AAEH;;AAED;;;;AAIe,SAAST,YAAT,CAAuBU,QAAvB,EACf;AACI,QAAMC,iBAAiBD,QAAvB;AACA,QAAME,gBAAgBV,eAAgBS,cAAhB,CAAtB;;AAEA,qBAAOE,IAAP,2BAAqCH,QAArC;AACA;AACA,QAAMI,YAAYC,QAAS,cAAT,CAAlB;;AAEA,WAAO,IAAIC,OAAJ,CAAa,UAAEC,OAAF,EAAWC,MAAX,EACpB;AACI,0BAAGC,UAAH,CAAelB,SAAf;AACA,yBAAOY,IAAP,yBAAmCZ,SAAnC;;AAEAW,sBAAcQ,GAAd,CAAmB,UAAEC,SAAF,EACnB;AACI,gBAAMC,UAAU,eAAKL,OAAL,CAAcN,cAAd,EAA8BU,SAA9B,CAAhB;AACA,gBAAME,YAAeD,OAAf,eAAN;AACA,gBAAIE,aAAa,EAAjB;;AAEA,gBAAMC,YAAgBxB,SAAhB,SAA6BoB,SAA7B,gBAAN;;AAEA,gBACA;AACIG,6BAAa,kBAAGE,YAAH,CAAiBH,SAAjB,EAA4B,MAA5B,CAAb;;AAEA,oBAAMI,gBAAgBb,UAAUc,KAAV,CAAiBJ,UAAjB,CAAtB;AACA,kCAAGK,aAAH,CAAkBJ,SAAlB,EAA8BE,aAA9B;AACA,iCAAOG,OAAP,CAAmBL,SAAnB;AAEH,aARD,CASA,OAAQM,KAAR,EACA;AACI,iCAAOC,IAAP,CAAa,4BAAb,EAA2CX,SAA3C;AACH;AACJ,SArBD;;AAuBA,yBAAOR,IAAP,CAAa,qBAAb;AACAI;AACH,KA9BM,CAAP;AA+BH","file":"docgen.js","sourcesContent":["import fs                  from 'fs-extra';\nimport path                from 'path';\nimport logger              from './logger';\nimport CONSTANTS           from '../constants';\n\nconst PROPS_DIR = CONSTANTS.PROPS_DIR;\n\n/**\n * grab all Dirs inside the src\n * @param  {[type]} srcpath [description]\n * @return {[type]}         [description]\n */\nfunction getDirectories( srcpath )\n{\n    return fs.readdirSync( srcpath ).filter( ( file ) =>\n        fs.statSync( path.join( srcpath, file ) ).isDirectory() );\n}\n\n/**\n * generate docs for all components\n * @param  {[type]} srcFiles src file Dir to search for components\n */\nexport default function generateDocs( srcFiles )\n{\n    const mainFolderPath = srcFiles;\n    const allComponents = getDirectories( mainFolderPath );\n\n    logger.info( `Generating docs from ${srcFiles}` );\n    // logger.info( allComponents );\n    const reactDocs = require( 'react-docgen' );\n\n    return new Promise( ( resolve, reject ) =>\n    {\n        fs.mkdirsSync( PROPS_DIR );\n        logger.info( `Generating docs to ${PROPS_DIR}` );\n\n        allComponents.map( ( component ) =>\n        {\n            const thePath = path.resolve( mainFolderPath, component );\n            const indexPath = `${thePath}/index.jsx`;\n            let dataString = '';\n\n            const writingTo =  `${PROPS_DIR}/${component}-props.json`;\n\n            try\n            {\n                dataString = fs.readFileSync( indexPath, 'utf8' );\n\n                const componentInfo = reactDocs.parse( dataString );\n                fs.writeJsonSync( writingTo,  componentInfo );\n                logger.verbose( `${writingTo} written` );\n\n            }\n            catch ( error )\n            {\n                logger.warn( 'no index file for folder: ', component );\n            }\n        } );\n\n        logger.info( 'Prop docs generated' );\n        resolve();\n    } );\n}\n"]}
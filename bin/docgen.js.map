{"version":3,"sources":["../lib/docgen.js"],"names":["PROPS_DIR","CONSTANTS","getDirectories","srcpath","fs","readdirSync","filter","file","statSync","path","join","isDirectory","generateDocs","srcFiles","mainFolderPath","allComponents","logger","info","reactDocs","require","Promise","resolve","reject","mkdirsSync","map","component","thePath","indexPath","dataString","writingTo","readFileSync","componentInfo","parse","writeJsonSync","verbose","error","warn"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,SAAS,GAAGC,mBAAUD,SAA5B;AAEA;;;;;;AAKA,SAASE,cAAT,CAAyBC,OAAzB,EACA;AACI,SAAOC,iBAAGC,WAAH,CAAgBF,OAAhB,EAA0BG,MAA1B,CAAkC,UAAEC,IAAF;AAAA,WACrCH,iBAAGI,QAAH,CAAaC,cAAKC,IAAL,CAAWP,OAAX,EAAoBI,IAApB,CAAb,EAA0CI,WAA1C,EADqC;AAAA,GAAlC,CAAP;AAEH;AAED;;;;;;AAIe,SAASC,YAAT,CAAuBC,QAAvB,EACf;AACI,MAAMC,cAAc,GAAGD,QAAvB;AACA,MAAME,aAAa,GAAGb,cAAc,CAAEY,cAAF,CAApC;;AAEAE,kBAAOC,IAAP,gCAAqCJ,QAArC,GAJJ,CAKI;;;AACA,MAAMK,SAAS,GAAGC,OAAO,CAAE,cAAF,CAAzB;;AAEA,SAAO,IAAIC,OAAJ,CAAa,UAAEC,OAAF,EAAWC,MAAX,EACpB;AACIlB,qBAAGmB,UAAH,CAAevB,SAAf;;AACAgB,oBAAOC,IAAP,8BAAmCjB,SAAnC;;AAEAe,IAAAA,aAAa,CAACS,GAAd,CAAmB,UAAEC,SAAF,EACnB;AACI,UAAMC,OAAO,GAAGjB,cAAKY,OAAL,CAAcP,cAAd,EAA8BW,SAA9B,CAAhB;;AACA,UAAME,SAAS,aAAMD,OAAN,eAAf;AACA,UAAIE,UAAU,GAAG,EAAjB;AAEA,UAAMC,SAAS,aAAO7B,SAAP,cAAoByB,SAApB,gBAAf;;AAEA,UACA;AACIG,QAAAA,UAAU,GAAGxB,iBAAG0B,YAAH,CAAiBH,SAAjB,EAA4B,MAA5B,CAAb;AAEA,YAAMI,aAAa,GAAGb,SAAS,CAACc,KAAV,CAAiBJ,UAAjB,CAAtB;;AACAxB,yBAAG6B,aAAH,CAAkBJ,SAAlB,EAA8BE,aAA9B;;AACAf,wBAAOkB,OAAP,WAAmBL,SAAnB;AAEH,OARD,CASA,OAAQM,KAAR,EACA;AACInB,wBAAOoB,IAAP,CAAa,4BAAb,EAA2CX,SAA3C;AACH;AACJ,KArBD;;AAuBAT,oBAAOC,IAAP,CAAa,qBAAb;;AACAI,IAAAA,OAAO;AACV,GA9BM,CAAP;AA+BH","sourcesContent":["import fs                  from 'fs-extra';\nimport path                from 'path';\nimport logger              from './logger';\nimport CONSTANTS           from '../constants';\n\nconst PROPS_DIR = CONSTANTS.PROPS_DIR;\n\n/**\n * grab all Dirs inside the src\n * @param  {[type]} srcpath [description]\n * @return {[type]}         [description]\n */\nfunction getDirectories( srcpath )\n{\n    return fs.readdirSync( srcpath ).filter( ( file ) =>\n        fs.statSync( path.join( srcpath, file ) ).isDirectory() );\n}\n\n/**\n * generate docs for all components\n * @param  {[type]} srcFiles src file Dir to search for components\n */\nexport default function generateDocs( srcFiles )\n{\n    const mainFolderPath = srcFiles;\n    const allComponents = getDirectories( mainFolderPath );\n\n    logger.info( `Generating docs from ${srcFiles}` );\n    // logger.info( allComponents );\n    const reactDocs = require( 'react-docgen' );\n\n    return new Promise( ( resolve, reject ) =>\n    {\n        fs.mkdirsSync( PROPS_DIR );\n        logger.info( `Generating docs to ${PROPS_DIR}` );\n\n        allComponents.map( ( component ) =>\n        {\n            const thePath = path.resolve( mainFolderPath, component );\n            const indexPath = `${thePath}/index.jsx`;\n            let dataString = '';\n\n            const writingTo =  `${PROPS_DIR}/${component}-props.json`;\n\n            try\n            {\n                dataString = fs.readFileSync( indexPath, 'utf8' );\n\n                const componentInfo = reactDocs.parse( dataString );\n                fs.writeJsonSync( writingTo,  componentInfo );\n                logger.verbose( `${writingTo} written` );\n\n            }\n            catch ( error )\n            {\n                logger.warn( 'no index file for folder: ', component );\n            }\n        } );\n\n        logger.info( 'Prop docs generated' );\n        resolve();\n    } );\n}\n"],"file":"docgen.js"}
{"version":3,"sources":["../lib/build.js"],"names":["options","optionDefinitions","distOptions","env","config","DIST_DIR","CONSTANTS","OUT_DIR","fs","mkdirsSync","resolve","alias","displayComponentsSrc","then","logger","info","err","stats","hasErrors","error","console","log"],"mappings":"AAAA;;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAGA,IAAMA,OAAO,GAAG,8BAAiBC,gBAAjB,CAAhB;;AAEA,IAAMC,WAAW,qBAAQF,OAAR;AAAiBG,EAAAA,GAAG,EAAE;AAAtB,EAAjB;;AACA,IAAMC,MAAM,GAAQ,6BAAgBF,WAAhB,CAApB;AAEA,IAAMG,QAAQ,GAAGC,mBAAUD,QAA3B;AACA,IAAME,OAAO,GAAID,mBAAUC,OAA3B;;AAEAC,iBAAGC,UAAH,CAAeF,OAAf;;AACAC,iBAAGC,UAAH,CAAeJ,QAAf;;AAEA,+BAAiBD,MAAM,CAACM,OAAP,CAAeC,KAAf,CAAqBC,oBAAtC,GAA+DC,IAA/D,CAAqE,YACrE;AACIC,kBAAOC,IAAP,CAAa,sCAAb;;AACAD,kBAAOC,IAAP,CAAa,sCAAb;;AACAD,kBAAOC,IAAP,CAAa,sCAAb;;AACAD,kBAAOC,IAAP,gCAAqCR,OAArC;;AAEA,wBAASH,MAAT,EAAiB,UAAEY,GAAF,EAAOC,KAAP,EACjB;AACI,QAAKD,GAAG,IAAIC,KAAK,CAACC,SAAN,EAAZ,EACA;AACIJ,sBAAOK,KAAP,CAAc,wBAAd;;AACAL,sBAAOK,KAAP,CAAcH,GAAd,EAFJ,CAIA;;;AACII,MAAAA,OAAO,CAACC,GAAR,CAAaJ,KAAb;AACH,KAPD,MASA;AACIH,sBAAOC,IAAP,CAAa,gBAAb;AACH;AACJ,GAdD;AAeH,CAtBD","sourcesContent":["#! /usr/bin/env node\nimport fs                    from 'fs-extra';\nimport commandLineArgs       from 'command-line-args';\nimport webpack, { Compiler } from 'webpack';\nimport copyfiles             from 'copyfiles';\n\nimport logger                from './logger';\nimport optionDefinitions     from './cli-args';\nimport generateConfig        from './generateConfig';\nimport generateDocs          from './docgen';\nimport CONSTANTS             from '../constants';\n\n\nconst options = commandLineArgs( optionDefinitions );\n\nconst distOptions = { ...options, env: 'dist' };\nconst config      = generateConfig( distOptions );\n\nconst DIST_DIR = CONSTANTS.DIST_DIR;\nconst OUT_DIR  = CONSTANTS.OUT_DIR;\n\nfs.mkdirsSync( OUT_DIR );\nfs.mkdirsSync( DIST_DIR );\n\ngenerateDocs( `${config.resolve.alias.displayComponentsSrc}` ).then( () =>\n{\n    logger.info( '************************************' );\n    logger.info( '*****  Starting Webpack Build  *****' );\n    logger.info( '************************************' );\n    logger.info( ` Outputting build to ${OUT_DIR}` );\n\n    webpack( config, ( err, stats ) =>\n    {\n        if ( err || stats.hasErrors() )\n        {\n            logger.error( 'Lochness Build Errors:' );\n            logger.error( err );\n\n        // logger does not...\n            console.log( stats );\n        }\n        else\n        {\n            logger.info( 'Lochness built' );\n        }\n    } );\n} );\n"],"file":"build.js"}
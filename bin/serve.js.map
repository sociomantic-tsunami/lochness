{"version":3,"sources":["../lib/serve.js"],"names":["INDEX_HTML","DIST_DIR","pwd","process","cwd","setupServer","options","test","dist","logger","info","server","Hapi","Server","connection","host","port","TEST_PORT","PORT","Promise","resolve","register","inert","err","route","method","path","handler","request","reply","file","confine","directory","ASSETS_DIR","NODE_DIR","debug","start","uri"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;AAQA,IAAMA,UAAU,aAAMC,mBAAN,gBAAhB;AACA,IAAMC,GAAG,GAAUC,OAAO,CAACC,GAAR,EAAnB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAEC,OAAF,EACpB;AAAA,MAD+BC,IAC/B,uEADsC,KACtC;AACI,MAAMC,IAAI,aAAMN,GAAN,cAAaI,OAAO,CAACE,IAArB,CAAV;;AAEAC,kBAAOC,IAAP,CAAa,0CAAb;;AACAD,kBAAOC,IAAP,CAAa,0CAAb;;AACAD,kBAAOC,IAAP,CAAa,0CAAb;;AAEA,MAAMC,MAAM,GAAG,IAAIC,cAAKC,MAAT,EAAf;AAEAF,EAAAA,MAAM,CAACG,UAAP,CAAmB;AACfC,IAAAA,IAAI,EAAG,WADQ;AAEfC,IAAAA,IAAI,EAAGT,IAAI,GAAGU,oBAAH,GAAeC;AAFX,GAAnB;AAKA,SAAO,IAAIC,OAAJ,CAAa,UAAAC,OAAO,EAC3B;AACIT,IAAAA,MAAM,CAACU,QAAP,CAAiBC,cAAjB,EAAwB,UAAEC,GAAF,EACxB;AACI,UAAKA,GAAL,EACA;AACI,cAAMA,GAAN;AACH;;AAEDZ,MAAAA,MAAM,CAACa,KAAP,CAAc;AACVC,QAAAA,MAAM,EAAG,KADC;AAEVC,QAAAA,IAAI,EAAK,GAFC;AAGVC,QAAAA,OAHU,mBAGDC,OAHC,EAGQC,KAHR,EAIV;AACIpB,0BAAOC,IAAP,CAAaV,UAAb;;AACA6B,UAAAA,KAAK,CAACC,IAAN,CAAY9B,UAAZ,EAAwB;AAAE+B,YAAAA,OAAO,EAAE;AAAX,WAAxB;AACH;AAPS,OAAd;AAUApB,MAAAA,MAAM,CAACa,KAAP,CAAc;AACVC,QAAAA,MAAM,EAAI,KADA;AAEVC,QAAAA,IAAI,EAAM,kBAFA;AAGVC,QAAAA,OAAO,EAAG;AACNK,UAAAA,SAAS,EAAG;AACRN,YAAAA,IAAI,EAAGO;AADC;AADN;AAHA,OAAd;AAWAtB,MAAAA,MAAM,CAACa,KAAP,CAAc;AACVC,QAAAA,MAAM,EAAI,KADA;AAEVC,QAAAA,IAAI,EAAM,wBAFA;AAGVC,QAAAA,OAAO,EAAG;AACNK,UAAAA,SAAS,EAAG;AACRN,YAAAA,IAAI,EAAGQ;AADC;AADN;AAHA,OAAd;AAUAvB,MAAAA,MAAM,CAACa,KAAP,CAAc;AACVC,QAAAA,MAAM,EAAG,KADC;AAEVC,QAAAA,IAAI,EAAK,uBAFC;AAGVC,QAAAA,OAHU,mBAGDC,OAHC,EAGQC,KAHR,EAIV;AACIpB,0BAAO0B,KAAP,CAAc,aAAd,EAA6B3B,IAA7B;;AACAqB,UAAAA,KAAK,CAACC,IAAN,CAAYtB,IAAZ,EAAkB;AAAEuB,YAAAA,OAAO,EAAE;AAAX,WAAlB;AACH;AAPS,OAAd;AAUApB,MAAAA,MAAM,CAACyB,KAAP,CAAc,UAAAb,GAAG,EACjB;AACI,YAAKA,GAAL,EACA;AACI,gBAAMA,GAAN;AACH;;AAEDd,wBAAOC,IAAP,CAAa,oBAAb,EAAmCC,MAAM,CAACD,IAAP,CAAY2B,GAA/C;;AAEAjB,QAAAA,OAAO;AACV,OAVD;AAWH,KA3DD;AA4DH,GA9DM,CAAP;AA+DH,CA9ED;;eAgFef,W","sourcesContent":["import Hapi    from 'hapi';\nimport inert   from 'inert';\n\nimport logger  from './logger';\nimport {\n    ASSETS_DIR,\n    DIST_DIR,\n    NODE_DIR,\n    PORT,\n    TEST_PORT,\n} from '../constants';\n\nconst INDEX_HTML = `${DIST_DIR}/index.html`;\nconst pwd        = process.cwd();\n\nconst setupServer = ( options, test = false ) =>\n{\n    const dist = `${pwd}/${options.dist}`;\n\n    logger.info( '****************************************' );\n    logger.info( '*****  Setting up Lochness Server  *****' );\n    logger.info( '****************************************' );\n\n    const server = new Hapi.Server();\n\n    server.connection( {\n        host : 'localhost',\n        port : test ? TEST_PORT : PORT\n    } );\n\n    return new Promise( resolve =>\n    {\n        server.register( inert, ( err ) =>\n        {\n            if ( err )\n            {\n                throw err;\n            }\n\n            server.route( {\n                method : 'GET',\n                path   : '/',\n                handler( request, reply )\n                {\n                    logger.info( INDEX_HTML );\n                    reply.file( INDEX_HTML, { confine: false } );\n                }\n            } );\n\n            server.route( {\n                method  : 'GET',\n                path    : '/assets/{param*}',\n                handler : {\n                    directory : {\n                        path : ASSETS_DIR\n                    }\n                }\n            } );\n\n\n            server.route( {\n                method  : 'GET',\n                path    : '/node_modules/{param*}',\n                handler : {\n                    directory : {\n                        path : NODE_DIR\n                    }\n                }\n            } );\n\n            server.route( {\n                method : 'GET',\n                path   : '/displayComponents.js',\n                handler( request, reply )\n                {\n                    logger.debug( 'Requesting:', dist );\n                    reply.file( dist, { confine: false } );\n                }\n            } );\n\n            server.start( err =>\n            {\n                if ( err )\n                {\n                    throw err;\n                }\n\n                logger.info( 'Server running at:', server.info.uri );\n\n                resolve();\n            } );\n        } );\n    } );\n};\n\nexport default setupServer;\n"],"file":"serve.js"}
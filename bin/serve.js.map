{"version":3,"sources":["../lib/serve.js"],"names":["INDEX_HTML","pwd","process","cwd","setupServer","options","test","distFolder","components","info","server","Server","connection","host","port","Promise","register","err","route","method","path","handler","request","reply","file","confine","directory","displayComponentsJs","debug","displayComponentStylesCss","start","uri","resolve"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AAQA,IAAMA,gDAAN;AACA,IAAMC,MAAaC,QAAQC,GAAR,EAAnB;;AAEA,IAAMC,cAAc,SAAdA,WAAc,CAAEC,OAAF,EACpB;AAAA,QAD+BC,IAC/B,uEADsC,KACtC;;AACI,QAAMC,aAAgBN,GAAhB,SAAuBI,QAAQG,UAA/B,UAAN;;AAEA,qBAAOC,IAAP,CAAa,0CAAb;AACA,qBAAOA,IAAP,CAAa,0CAAb;AACA,qBAAOA,IAAP,CAAa,0CAAb;;AAEA,QAAMC,SAAS,IAAI,eAAKC,MAAT,EAAf;;AAEAD,WAAOE,UAAP,CAAmB;AACfC,cAAO,WADQ;AAEfC,cAAOR;AAFQ,KAAnB;;AAKA,WAAO,IAAIS,OAAJ,CAAa,mBACpB;AACIL,eAAOM,QAAP,kBAAwB,UAAEC,GAAF,EACxB;AACI,gBAAKA,GAAL,EACA;AACI,sBAAMA,GAAN;AACH;;AAEDP,mBAAOQ,KAAP,CAAc;AACVC,wBAAS,KADC;AAEVC,sBAAS,GAFC;AAGVC,uBAHU,mBAGDC,OAHC,EAGQC,KAHR,EAIV;AACI,qCAAOd,IAAP,CAAaT,UAAb;AACAuB,0BAAMC,IAAN,CAAYxB,UAAZ,EAAwB,EAAEyB,SAAS,KAAX,EAAxB;AACH;AAPS,aAAd;;AAUAf,mBAAOQ,KAAP,CAAc;AACVC,wBAAU,KADA;AAEVC,sBAAU,kBAFA;AAGVC,yBAAU;AACNK,+BAAY;AACRN;AADQ;AADN;AAHA,aAAd;;AAWAV,mBAAOQ,KAAP,CAAc;AACVC,wBAAU,KADA;AAEVC,sBAAU,wBAFA;AAGVC,yBAAU;AACNK,+BAAY;AACRN;AADQ;AADN;AAHA,aAAd;;AAUAV,mBAAOQ,KAAP,CAAc;AACVC,wBAAS,KADC;AAEVC,sBAAS,uBAFC;AAGVC,uBAHU,mBAGDC,OAHC,EAGQC,KAHR,EAIV;AACI,wBAAMI,sBACCpB,UADD,0BAAN;;AAGA,qCAAOqB,KAAP,CAAc,aAAd,EAA6BD,mBAA7B;AACAJ,0BAAMC,IAAN,CAAYG,mBAAZ,EAAiC,EAAEF,SAAS,KAAX,EAAjC;AACH;AAVS,aAAd;;AAaAf,mBAAOQ,KAAP,CAAc;AACVC,wBAAS,KADC;AAEVC,sBAAS,6BAFC;AAGVC,uBAHU,mBAGDC,OAHC,EAGQC,KAHR,EAIV;AACI,wBAAMM,4BACCtB,UADD,gCAAN;;AAGA,qCAAOqB,KAAP,CAAc,aAAd,EAA6BC,yBAA7B;AACAN,0BAAMC,IAAN,CAAYK,yBAAZ,EAAuC,EAAEJ,SAAS,KAAX,EAAvC;AACH;AAVS,aAAd;;AAaAf,mBAAOoB,KAAP,CAAc,eACd;AACI,oBAAKb,GAAL,EACA;AACI,0BAAMA,GAAN;AACH;;AAED,iCAAOR,IAAP,CAAa,oBAAb,EAAmCC,OAAOD,IAAP,CAAYsB,GAA/C;;AAEAC;AACH,aAVD;AAWH,SA3ED;AA4EH,KA9EM,CAAP;AA+EH,CA9FD;;kBAgGe5B,W","file":"serve.js","sourcesContent":["import Hapi    from 'hapi';\nimport inert   from 'inert';\n\nimport logger  from './logger';\nimport {\n    ASSETS_DIR,\n    DIST_DIR,\n    NODE_DIR,\n    PORT,\n    TEST_PORT,\n} from '../constants';\n\nconst INDEX_HTML = `${DIST_DIR}/index.html`;\nconst pwd        = process.cwd();\n\nconst setupServer = ( options, test = false ) =>\n{\n    const distFolder = `${pwd}/${options.components}/dist`;\n\n    logger.info( '****************************************' );\n    logger.info( '*****  Setting up Lochness Server  *****' );\n    logger.info( '****************************************' );\n\n    const server = new Hapi.Server();\n\n    server.connection( {\n        host : 'localhost',\n        port : test ? TEST_PORT : PORT\n    } );\n\n    return new Promise( resolve =>\n    {\n        server.register( inert, ( err ) =>\n        {\n            if ( err )\n            {\n                throw err;\n            }\n\n            server.route( {\n                method : 'GET',\n                path   : '/',\n                handler( request, reply )\n                {\n                    logger.info( INDEX_HTML );\n                    reply.file( INDEX_HTML, { confine: false } );\n                }\n            } );\n\n            server.route( {\n                method  : 'GET',\n                path    : '/assets/{param*}',\n                handler : {\n                    directory : {\n                        path : ASSETS_DIR\n                    }\n                }\n            } );\n\n\n            server.route( {\n                method  : 'GET',\n                path    : '/node_modules/{param*}',\n                handler : {\n                    directory : {\n                        path : NODE_DIR\n                    }\n                }\n            } );\n\n            server.route( {\n                method : 'GET',\n                path   : '/displayComponents.js',\n                handler( request, reply )\n                {\n                    const displayComponentsJs =\n                        `${distFolder}/displayComponents.js`;\n\n                    logger.debug( 'Requesting:', displayComponentsJs );\n                    reply.file( displayComponentsJs, { confine: false } );\n                }\n            } );\n\n            server.route( {\n                method : 'GET',\n                path   : '/displayComponentStyles.css',\n                handler( request, reply )\n                {\n                    const displayComponentStylesCss =\n                        `${distFolder}/displayComponentStyles.css`;\n\n                    logger.debug( 'Requesting:', displayComponentStylesCss );\n                    reply.file( displayComponentStylesCss, { confine: false } );\n                }\n            } );\n\n            server.start( err =>\n            {\n                if ( err )\n                {\n                    throw err;\n                }\n\n                logger.info( 'Server running at:', server.info.uri );\n\n                resolve();\n            } );\n        } );\n    } );\n};\n\nexport default setupServer;\n"]}
/*
 * Copyright (c) 2017 dunnhumby Germany GmbH.
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the LICENSE file
 * in the root directory of this source tree.
 *
 */

import React, { Component }             from 'react';
import PropTypes                        from 'prop-types';

import { Table, TableRow, TableCell }   from 'nessie-ui';


/* Helper method to build a pretty string of valid values for
 * a given prop from the JSON generated by react-docgen
 */
const getValidValues = ( typeSpec = {} ) =>
{
    let valueStr;

    if ( typeSpec.value )
    {
        const values = Array.isArray( typeSpec.value ) ?
            typeSpec.value : [ typeSpec.value ];

        const validValues = values.map( ( value ) =>
        {
            const valueName  = value.name;
            const valueValue = value.value;

            if ( valueValue )
            {
                if ( typeof valueValue === 'object' )
                {
                    return getValidValues( value );
                }

                return valueValue;
            }
            else if ( valueName && valueName !== 'custom' )
            {
                return `<${valueName}>`;
            }
        } );

        valueStr = validValues.join( ', ' );

        if ( typeSpec.name === 'arrayOf' )
        {
            valueStr = `array[${valueStr}]`;
        }
    }
    else if ( typeSpec.name )
    {
        valueStr = `<${typeSpec.name}>`;
    }

    return valueStr;
};


export default class SpecsTable extends Component
{
    static propTypes =
    {
        specs : PropTypes.object
    };

    render()
    {
        const { specs = {} } = this.props;

        return (
            <Table
                isZebra columns = { [
              { size: '1/6', title: 'Prop' },
              { size: '1/3', title: 'Description' },
              { size: '1/3', title: 'Valid values' },
              { size: '1/6', title: 'Default value' }
                ] }>
                {
                    Object.keys( specs ).map( ( propName, index ) =>
                    {
                        const propSpec     = specs[ propName ];
                        const typeSpec     = propSpec.type;

                        const isRequired   = propSpec.required;
                        const description  = propSpec.description;
                        const defaultValue = propSpec.defaultValue ?
                            propSpec.defaultValue.value : undefined;
                        const validValues  = getValidValues( typeSpec );

                        if ( typeSpec )
                        {
                            return (
                                <TableRow key = { index }>
                                    <TableCell>
                                        <span><code>{ propName }</code>{ isRequired ? '*' : null }</span>
                                    </TableCell>
                                    <TableCell>
                                        <span>{ description || '-' }</span>
                                    </TableCell>
                                    <TableCell>
                                        <span>{ validValues ? <code>{ validValues }</code> : '-' }</span>
                                    </TableCell>
                                    <TableCell>
                                        <span>{ defaultValue ? <code>{ defaultValue }</code> : '-' }</span>
                                    </TableCell>
                                </TableRow>
                            );
                        }
                    } )
                }
            </Table>
        );
    }
}
